/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sportsdb;

import java.sql.*;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class PracticesPanel extends javax.swing.JPanel {

    /**
     * Creates new form PracticesPanel
     */
    private static Connection cn;
    public PracticesPanel(Connection conn) {
        initComponents();
        int time;
        cn=conn;
        
        for(int i=0; i<scheduleTable.getRowCount();i++){
            String hours="";
            time=i+8;
            if(time<10)
                hours=hours+"0";
            hours=hours+time+":00-";
            if(time+1<10)
                hours=hours+"0";
            hours=hours+(time+1)+":00";
            scheduleTable.setValueAt(hours, i, 0);
        }
        refreshSchedule();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        teamComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        removePracticeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        addPracticeButton = new javax.swing.JButton();
        facilityCombobox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(32767, 385));

        jLabel1.setText("Select Team");

        teamComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        teamComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamComboBoxActionPerformed(evt);
            }
        });

        scheduleTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scheduleTable.setDragEnabled(true);
        scheduleTable.setShowHorizontalLines(true);
        scheduleTable.setShowVerticalLines(true);
        scheduleTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(scheduleTable);
        if (scheduleTable.getColumnModel().getColumnCount() > 0) {
            scheduleTable.getColumnModel().getColumn(0).setResizable(false);
            scheduleTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            scheduleTable.getColumnModel().getColumn(1).setResizable(false);
            scheduleTable.getColumnModel().getColumn(2).setResizable(false);
            scheduleTable.getColumnModel().getColumn(3).setResizable(false);
            scheduleTable.getColumnModel().getColumn(4).setResizable(false);
            scheduleTable.getColumnModel().getColumn(5).setResizable(false);
            scheduleTable.getColumnModel().getColumn(6).setResizable(false);
            scheduleTable.getColumnModel().getColumn(7).setResizable(false);
        }

        removePracticeButton.setText("Remove Practice Hours");
        removePracticeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePracticeButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        addPracticeButton.setText("Add Practice Hours");
        addPracticeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPracticeButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Facility:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addPracticeButton)
                        .addGap(0, 90, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(facilityCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addPracticeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facilityCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removePracticeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(teamComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removePracticeButton)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void teamComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamComboBoxActionPerformed
        fillSchedule((String)teamComboBox.getSelectedItem());
    }//GEN-LAST:event_teamComboBoxActionPerformed

    private void addPracticeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPracticeButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) scheduleTable.getModel();
        int ri = scheduleTable.getSelectedRow();
        int ci = scheduleTable.getSelectedColumn();
        try{Class.forName(SportsDB.driverClassName);
            if(!((ci>0)&&(ci<8))){
                    throw new Exception("Select valid day and hour.");
            }
            if(((String)model.getValueAt(ri, ci)).equals("")){                
                int tid;
                String day;
                String time;
                int fid;
                
                
                PreparedStatement ps = cn.prepareStatement("SELECT faid FROM select_facilities(1, ?, NULL, TRUE) ");
                ps.setObject(1, facilityCombobox.getSelectedItem());
                ResultSet rs = ps.executeQuery();
                rs.next();
                fid=rs.getInt("faid");
                
                day=model.getColumnName(ci);
                
                time=(String)model.getValueAt(ri, 0);
                time=time.substring(0, 5);
                time=time+":00";
                
                ps = cn.prepareStatement("SELECT tid FROM select_teams(1, NULL, ?, TRUE, NULL)");
                ps.setObject(1,teamComboBox.getSelectedItem());
                rs=ps.executeQuery();
                rs.next();
                tid=rs.getInt("tid");
                
                ps = cn.prepareStatement("SELECT insert_practice(?, ?, ?::time, ?)");
                ps.setObject(1, tid);
                ps.setObject(2, day);
                ps.setObject(3, time);
                ps.setObject(4, fid);
                ps.executeQuery();
                fillSchedule((String)teamComboBox.getSelectedItem());
            }
            else{
                throw new Exception ("Team already practices at that time and day!");
            }
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
                        
        
    }//GEN-LAST:event_addPracticeButtonActionPerformed

    private void removePracticeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePracticeButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) scheduleTable.getModel();
        int ri = scheduleTable.getSelectedRow();
        int ci = scheduleTable.getSelectedColumn();
        try{Class.forName(SportsDB.driverClassName);
            if(!((ci>0)&&(ci<8))){
                    throw new Exception("Select valid day and hour.");
            }
            if(!(((String)model.getValueAt(ri, ci)).equals(""))){                
                
                int tid;
                String day;
                String time;                  
                day=model.getColumnName(ci);                
                time=(String)model.getValueAt(ri, 0);
                time=time.substring(0, 5);
                time=time+":00";
                
                PreparedStatement 
                ps = cn.prepareStatement("SELECT tid FROM select_teams(1, NULL, ?, TRUE, NULL)");
                ps.setObject(1,teamComboBox.getSelectedItem());
                ResultSet rs = ps.executeQuery();
                rs.next();
                tid=rs.getInt("tid");
                
                ps = cn.prepareStatement("SELECT delete_practice(?, ?, ?::time)");
                ps.setObject(1, tid);
                ps.setObject(2, day);
                ps.setObject(3, time);
                ps.executeQuery();
                fillSchedule((String)teamComboBox.getSelectedItem());
            }
            else{
                throw new Exception("No practices at that time and day.");
            }
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_removePracticeButtonActionPerformed

    private void refreshSchedule(){
        try{Class.forName(SportsDB.driverClassName);
             teamComboBox.removeAllItems();
             facilityCombobox.removeAllItems();
            PreparedStatement ps = cn.prepareStatement("SELECT tname FROM select_teams(1, NULL, NULL, TRUE, NULL)");
            ResultSet rs = ps.executeQuery();
            while(rs.next()){  
                teamComboBox.addItem(rs.getString("tname"));
            }
            if(teamComboBox.getItemCount()==0)
                throw new Exception("We have no teams!");
            teamComboBox.setSelectedIndex(0);
            
            ps = cn.prepareStatement("SELECT faname FROM select_facilities(1, NULL, NULL, TRUE)");
            rs = ps.executeQuery();
            while(rs.next()){  
                facilityCombobox.addItem(rs.getString("faname"));
            }
            if(facilityCombobox.getItemCount()==0)
                throw new Exception("We have no facilities!");
            facilityCombobox.setSelectedIndex(0);
            
            fillSchedule((String)facilityCombobox.getSelectedItem());
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
    }
    
    private void fillSchedule(String teamname){
        DefaultTableModel model = (DefaultTableModel) scheduleTable.getModel();
        try{Class.forName(SportsDB.driverClassName);
            PreparedStatement ps = cn.prepareStatement("SELECT * FROM team_schedule(?)");
            ps.setObject(1, teamComboBox.getSelectedItem());
            ResultSet rs=ps.executeQuery();
            
            for(int i = 1; i<model.getColumnCount(); i++)
                for(int j = 0; j<model.getRowCount(); j++){
                    model.setValueAt("", j, i);
                }
            while(rs.next()){
                String day = rs.getString("pday");
                String time = rs.getString("ptime");
                int facility = rs.getInt("fid");
                for(int i = 1; i<model.getColumnCount(); i++){
                    if(day.equals(model.getColumnName(i))){
                        for(int j = 0; j<model.getRowCount(); j++){
                            if((time.charAt(0)==((String)model.getValueAt(j, 0)).charAt(0))&&(time.charAt(1)==((String)model.getValueAt(j, 0)).charAt(1))){
                                model.setValueAt(("PRACTICE at: "+facility), j, i);
                            }                            
                        }
                    }
                }
            }
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPracticeButton;
    private javax.swing.JComboBox<String> facilityCombobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removePracticeButton;
    private javax.swing.JTable scheduleTable;
    private javax.swing.JComboBox<String> teamComboBox;
    // End of variables declaration//GEN-END:variables
}
