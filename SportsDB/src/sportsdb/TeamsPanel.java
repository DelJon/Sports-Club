/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sportsdb;

import java.sql.*;


import static javax.swing.JOptionPane.showMessageDialog;

import javax.swing.table.DefaultTableModel;



/**
 *
 * @author User
 */
public class TeamsPanel extends javax.swing.JPanel {

    private Connection cn;
    public TeamsPanel(Connection conn) {
        initComponents();
        cn=conn;
        idRadioButton.setSelected(true);
        DefaultTableModel model = (DefaultTableModel) teamsTable.getModel();  
        refreshTeams();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortButtonGroup = new javax.swing.ButtonGroup();
        editFrame = new javax.swing.JFrame();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        editName = new javax.swing.JTextField();
        editSport = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        submitEdit = new javax.swing.JButton();
        activateButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        activeLabel = new javax.swing.JLabel();
        insertFrame = new javax.swing.JFrame();
        jLabel7 = new javax.swing.JLabel();
        insertName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        insertSport = new javax.swing.JComboBox<>();
        submitInsert = new javax.swing.JButton();
        membersFrame = new javax.swing.JFrame();
        addMemberButton = new javax.swing.JButton();
        removeMemberButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        teamMembersTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        addMemberTextfield = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        teamIdLabel = new javax.swing.JLabel();
        teamNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nameTextfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        sportCombobox = new javax.swing.JComboBox<>();
        newTeamButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        teamsTable = new javax.swing.JTable();
        editTeamButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        idRadioButton = new javax.swing.JRadioButton();
        sportRadioButton = new javax.swing.JRadioButton();
        nameRadioButton = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        membersButton = new javax.swing.JButton();
        activeCheckBox = new javax.swing.JCheckBox();

        editFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        editFrame.setAlwaysOnTop(true);
        editFrame.setBounds(new java.awt.Rectangle(0, 0, 300, 200));
        editFrame.setMaximumSize(new java.awt.Dimension(300, 200));
        editFrame.setPreferredSize(new java.awt.Dimension(300, 200));
        editFrame.setSize(new java.awt.Dimension(300, 200));
        editFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editFrameWindowClosing(evt);
            }
        });

        jLabel11.setText("Description");

        jLabel12.setText("Location");

        submitEdit.setText("Submit");
        submitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitEditActionPerformed(evt);
            }
        });

        activateButton.setText("-");
        activateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Active:");

        activeLabel.setForeground(new java.awt.Color(102, 102, 102));
        activeLabel.setText("N/A");

        javax.swing.GroupLayout editFrameLayout = new javax.swing.GroupLayout(editFrame.getContentPane());
        editFrame.getContentPane().setLayout(editFrameLayout);
        editFrameLayout.setHorizontalGroup(
            editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(editFrameLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(editFrameLayout.createSequentialGroup()
                        .addComponent(submitEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(activateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(editFrameLayout.createSequentialGroup()
                        .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(24, 24, 24)
                        .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editSport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editName, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(editFrameLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(activeLabel)))
                .addGap(0, 26, Short.MAX_VALUE))
        );
        editFrameLayout.setVerticalGroup(
            editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(editName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editSport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(activeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitEdit)
                    .addComponent(activateButton))
                .addGap(22, 22, 22))
        );

        editFrame.getAccessibleContext().setAccessibleParent(this);

        insertFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        insertFrame.setTitle("Insert new team");
        insertFrame.setAlwaysOnTop(true);
        insertFrame.setName("Insert new sport"); // NOI18N
        insertFrame.setSize(new java.awt.Dimension(300, 200));
        insertFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                insertFrameWindowClosing(evt);
            }
        });

        jLabel7.setText("Description");

        jLabel8.setText("Sport");

        submitInsert.setText("Submit");
        submitInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitInsertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout insertFrameLayout = new javax.swing.GroupLayout(insertFrame.getContentPane());
        insertFrame.getContentPane().setLayout(insertFrameLayout);
        insertFrameLayout.setHorizontalGroup(
            insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertFrameLayout.createSequentialGroup()
                        .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insertName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertSport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(submitInsert))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        insertFrameLayout.setVerticalGroup(
            insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(insertName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(insertSport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(submitInsert)
                .addContainerGap())
        );

        membersFrame.setTitle("Members");
        membersFrame.setSize(new java.awt.Dimension(600, 600));

        addMemberButton.setText("Add Member");
        addMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberButtonActionPerformed(evt);
            }
        });

        removeMemberButton.setText("Remove Selected");
        removeMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMemberButtonActionPerformed(evt);
            }
        });

        teamMembersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "First Name", "Last Name", "Joined"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teamMembersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(teamMembersTable);
        if (teamMembersTable.getColumnModel().getColumnCount() > 0) {
            teamMembersTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        }

        jLabel4.setText("Member ID:");

        jLabel9.setText("Team");

        teamIdLabel.setText("N/A");

        teamNameLabel.setText("N/A");

        javax.swing.GroupLayout membersFrameLayout = new javax.swing.GroupLayout(membersFrame.getContentPane());
        membersFrame.getContentPane().setLayout(membersFrameLayout);
        membersFrameLayout.setHorizontalGroup(
            membersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(membersFrameLayout.createSequentialGroup()
                .addGroup(membersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(membersFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(membersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                            .addGroup(membersFrameLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(teamIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(teamNameLabel)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(membersFrameLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMemberTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        membersFrameLayout.setVerticalGroup(
            membersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, membersFrameLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(membersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(teamIdLabel)
                    .addComponent(teamNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(membersFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMemberButton)
                    .addComponent(removeMemberButton)
                    .addComponent(jLabel4)
                    .addComponent(addMemberTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Search by Field");

        jLabel3.setText("Name");

        jLabel1.setText("Sport");

        sportCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any" }));

        newTeamButton.setText("New Team");
        newTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTeamButtonActionPerformed(evt);
            }
        });

        teamsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Sport", "Name", "Active?", "Members"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teamsTable.setGridColor(new java.awt.Color(243, 243, 243));
        teamsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        teamsTable.setShowVerticalLines(true);
        teamsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(teamsTable);
        if (teamsTable.getColumnModel().getColumnCount() > 0) {
            teamsTable.getColumnModel().getColumn(0).setResizable(false);
            teamsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            teamsTable.getColumnModel().getColumn(1).setResizable(false);
            teamsTable.getColumnModel().getColumn(1).setPreferredWidth(300);
            teamsTable.getColumnModel().getColumn(2).setResizable(false);
            teamsTable.getColumnModel().getColumn(2).setPreferredWidth(300);
            teamsTable.getColumnModel().getColumn(3).setResizable(false);
            teamsTable.getColumnModel().getColumn(4).setResizable(false);
            teamsTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        }

        editTeamButton.setText("Edit Selected");
        editTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTeamButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Apply Filters");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset Filters");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        sortButtonGroup.add(idRadioButton);
        idRadioButton.setText("ID");

        sortButtonGroup.add(sportRadioButton);
        sportRadioButton.setText("Sport");

        sortButtonGroup.add(nameRadioButton);
        nameRadioButton.setText("Name");

        jLabel6.setText("Sort by");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(idRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameRadioButton))
                    .addComponent(sportRadioButton)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idRadioButton)
                    .addComponent(nameRadioButton)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sportRadioButton))
        );

        membersButton.setText("View Members");
        membersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membersButtonActionPerformed(evt);
            }
        });

        activeCheckBox.setText("Display inactive teams?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(nameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(sportCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(activeCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editTeamButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(membersButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newTeamButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(nameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButton)
                            .addComponent(resetButton)
                            .addComponent(sportCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newTeamButton)
                    .addComponent(editTeamButton)
                    .addComponent(membersButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTeamButtonActionPerformed
        try{
            if(teamsTable.getRowCount()<=0){
                throw new Exception("No entries to edit!");
            }
            int row = teamsTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) teamsTable.getModel();
            int selection = (int)model.getValueAt(row, 0);
            editFrame.pack();
            editFrame.setVisible(true);
            editFrame.setTitle("Editing facility "+selection);
            editSport.removeAllItems();
            for (int i = 1; i < sportCombobox.getItemCount(); i++) {
                editSport.addItem(sportCombobox.getItemAt(i));
            }
            for (int i = 0; i < editSport.getItemCount(); i++) {
                if(editSport.getItemAt(i).equals((String)model.getValueAt(row, 1)))
                    editSport.setSelectedIndex(i);
            }
            if(((String)model.getValueAt(row, 3)).equals("YES")){
                activateButton.setText("Disband");
                activeLabel.setText("YES");
            }   
            else{
                activateButton.setText("Restore");
                activeLabel.setText("NO");
            }
            editName.setText((String)(model.getValueAt(row, 2)));               

            openPopup();

        } catch(Exception e){
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_editTeamButtonActionPerformed

    private void newTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTeamButtonActionPerformed
       insertFrame.pack();
       insertFrame.setVisible(true);
       insertSport.removeAllItems();
       for (int i = 1; i < sportCombobox.getItemCount(); i++) {
            insertSport.addItem(sportCombobox.getItemAt(i));
       }
       openPopup();
    }//GEN-LAST:event_newTeamButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try{Class.forName(SportsDB.driverClassName);
            
            PreparedStatement ps; 
            ResultSet rs;
            int sort;            
            String name;
            Integer sport;
            boolean active;
            DefaultTableModel model = (DefaultTableModel) teamsTable.getModel();
            if(nameRadioButton.isSelected())
                sort=3;
            else if(sportRadioButton.isSelected())
                sort=2;
            else 
                sort=1;
            
            if(nameTextfield.getText().equals(""))
                name=null;
            else
                name=nameTextfield.getText();
            
            if(sportCombobox.getSelectedIndex()==0)
                sport=null;
            else{
                String sname = (String) sportCombobox.getSelectedItem();
                ps=cn.prepareStatement("SELECT sportid FROM select_sports(1, NULL, NULL, ?)");
                ps.setObject(1, sname);
                rs = ps.executeQuery();
                rs.next();
                sport = rs.getInt("sportid");
            }
            active = !(activeCheckBox.isSelected());
            
            ps = cn.prepareStatement("SELECT * FROM select_teams(?, ?, ?, ?, ?)");
            ps.setObject(1, sort);
            ps.setObject(2, sport);
            ps.setObject(3, name);
            ps.setObject(4, active);
            ps.setObject(5, null);
            
            
            rs = ps.executeQuery();
            while(model.getRowCount()>0)
                model.removeRow(0);
            while(rs.next()){
                int tempid = rs.getInt("tid");
                String tempsport = rs.getString("sname");
                String tempname = rs.getString("tname");
                String tempactive;
                if(rs.getInt("tactive")==1)
                    tempactive="YES";                    
                else
                    tempactive="NO";
                ps = cn.prepareStatement("SELECT COUNT(*) from member_teams(?)");
                ps.setObject(1, tempid);
                ResultSet cs = ps.executeQuery();
                cs.next();
                int count = cs.getInt("count");
                model.addRow(new Object[]{tempid, tempsport, tempname, tempactive, count});
            }
            if(teamsTable.getRowCount()>0)
                teamsTable.setRowSelectionInterval(0, 0);
        }catch(Exception e){
        showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        refreshTeams();        
    }//GEN-LAST:event_resetButtonActionPerformed

    private void submitInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitInsertActionPerformed
        
        String tname=insertName.getText();
        String sname=(String)insertSport.getSelectedItem();
        int sid;

        
        try{
            if(tname.equals(""))
                throw new Exception("Please enter a name for the team.");
            PreparedStatement ps;
            ps=cn.prepareStatement("SELECT sportid FROM select_sports(1, NULL, NULL, ?)");
            ps.setObject(1, sname);
            ResultSet rs = ps.executeQuery();
            rs.next();
            sid = rs.getInt("sportid");
            
            ps = cn.prepareStatement("SELECT * FROM insert_teams(?, ?)");
            ps.setObject(1, sid);
            ps.setObject(2, tname);
            ps.executeQuery();

            insertFrame.setVisible(false);
            insertFrame.dispose();
            closePopup();
            refreshTeams();
        } catch(Exception e){
            showMessageDialog(null, e.getMessage());
        }
        
        
    }//GEN-LAST:event_submitInsertActionPerformed

    private void insertFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_insertFrameWindowClosing
        closePopup();
    }//GEN-LAST:event_insertFrameWindowClosing

    private void editFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_editFrameWindowClosing
        closePopup();
    }//GEN-LAST:event_editFrameWindowClosing

    private void activateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateButtonActionPerformed
        try{
            int row = teamsTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) teamsTable.getModel();
            int selection = (int)model.getValueAt(row, 0);
            PreparedStatement ps = cn.prepareStatement("SELECT * FROM active_teams(?)");
            ps.setObject(1, selection);
            ps.executeQuery();
            closePopup();
            refreshTeams();
            editFrame.setVisible(false);
            editFrame.dispose();
        } catch(Exception e){
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_activateButtonActionPerformed

    private void submitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitEditActionPerformed

        String tname=editName.getText();
        int tid = (int)teamsTable.getModel().getValueAt(teamsTable.getSelectedRow(), 0);
        int sid;        
        try{
            if(tname.equals(""))
                throw new Exception("Please enter a name for the team.");
            
            PreparedStatement ps;
            String sname = (String) editSport.getSelectedItem();
            ps=cn.prepareStatement("SELECT sportid FROM select_sports(1, NULL, NULL, ?)");
            ps.setObject(1, sname);
            ResultSet rs = ps.executeQuery();
            rs.next();
            sid = rs.getInt("sportid");
                
            ps = cn.prepareStatement("SELECT * FROM edit_teams(?, ?, ?)");
            ps.setObject(1, tid);
            ps.setObject(2, sid);
            ps.setObject(3, tname);
            ps.executeQuery();

            editFrame.setVisible(false);
            editFrame.dispose();
            closePopup();
            refreshTeams();
        } catch(Exception e){
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_submitEditActionPerformed

    private void membersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membersButtonActionPerformed
        membersFrame.setVisible(true);        
        int row = teamsTable.getSelectedRow();
        int selection = (int)teamsTable.getValueAt(row, 0);        
        DefaultTableModel model = (DefaultTableModel) teamMembersTable.getModel();
        membersFrame.setTitle("Members of team "+selection);
        teamIdLabel.setText(""+selection);
        teamNameLabel.setText((String)teamsTable.getValueAt(row, 2));
        try{Class.forName(SportsDB.driverClassName);
            while(model.getRowCount()>0)
                model.removeRow(0);
            PreparedStatement ps = cn.prepareStatement("SELECT * FROM member_teams(?)");
            ps.setObject(1, selection);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                int id = rs.getInt("meid");
                String fname = rs.getString("mfname");
                String lname = rs.getString("mlname");
                String joined = rs.getDate("mjoined").toString();                
                model.addRow(new Object[]{id, fname, lname, joined});
            }
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
        if(teamMembersTable.getRowCount()>0)
            teamMembersTable.setRowSelectionInterval(0, 0);
    }//GEN-LAST:event_membersButtonActionPerformed

    private void addMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberButtonActionPerformed
        String idtext = addMemberTextfield.getText();
        if(!(idtext.matches("[0-9]{6}"))){            
            showMessageDialog(null, "Invalid member id");
            addMemberTextfield.setText("");
        }
        else{
        Integer meid = Integer.parseInt(idtext);
        try{Class.forName(SportsDB.driverClassName);
            
            for(int i = 0; i<teamMembersTable.getRowCount(); i++){
                if(meid == (int)teamMembersTable.getValueAt(i, 0)){
                    throw new Exception("Member already in team!");
                    
                }                
            }        
            int tid = Integer.parseInt(teamIdLabel.getText());
            PreparedStatement ps = cn.prepareStatement("SELECT meid FROM select_members(1, NULL, NULL, NULL, NULL, NULL, ?, NULL, NULL, NULL, TRUE)");
            ps.setObject(1, meid);
            ResultSet rs = ps.executeQuery(); 
            boolean found=false;
            while(rs.next()){
                if(rs.getInt("meid")==meid)
                    found=true;
            }
            if(!found)
                throw new Exception("Member not found or is inactive");
            DefaultTableModel model = (DefaultTableModel) teamMembersTable.getModel();
            
            ps = cn.prepareStatement("SELECT * FROM insert_team_member(?,?)");
            ps.setObject(1, tid);
            ps.setObject(2, meid);
            rs = ps.executeQuery();    
            while(model.getRowCount()>0)
                model.removeRow(0);
            ps = cn.prepareStatement("SELECT * FROM member_teams(?)");
            ps.setObject(1, tid);
            rs = ps.executeQuery();
            while(rs.next()){
                int id = rs.getInt("meid");
                String fname = rs.getString("mfname");
                String lname = rs.getString("mlname");
                String joined = rs.getDate("mjoined").toString();                
                model.addRow(new Object[]{id, fname, lname, joined});
            }
            refreshTeams();
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
        }
    }//GEN-LAST:event_addMemberButtonActionPerformed

    private void removeMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMemberButtonActionPerformed
        
        Integer tid = Integer.parseInt(teamIdLabel.getText());
        DefaultTableModel model = (DefaultTableModel) teamMembersTable.getModel();
        int meid = (int)teamMembersTable.getValueAt(teamMembersTable.getSelectedRow(), 0);
        try{Class.forName(SportsDB.driverClassName);
            PreparedStatement ps = cn.prepareStatement("SELECT * FROM remove_team_member(?,?)");
            ps.setObject(1, tid);
            ps.setObject(2, meid);
            ResultSet rs = ps.executeQuery();    
            while(model.getRowCount()>0)
                model.removeRow(0);
            ps = cn.prepareStatement("SELECT * FROM member_teams(?)");
            ps.setObject(1, tid);
            rs = ps.executeQuery();
            while(rs.next()){
                int id = rs.getInt("meid");
                String fname = rs.getString("mfname");
                String lname = rs.getString("mlname");
                String joined = rs.getDate("mjoined").toString();                
                model.addRow(new Object[]{id, fname, lname, joined});
            }
            refreshTeams();
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_removeMemberButtonActionPerformed

    private void refreshTeams(){
        DefaultTableModel model = (DefaultTableModel) teamsTable.getModel();
        try{Class.forName(SportsDB.driverClassName);
            while(model.getRowCount()>0)
                model.removeRow(0);
            Statement statement = cn.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM select_teams(1, NULL, NULL, TRUE, NULL)");
            while(rs.next()){
                int id = rs.getInt("tid");
                String sport = rs.getString("sname");
                String name = rs.getString("tname");
                String active;
                if(rs.getInt("tactive")==1)
                    active="YES";                    
                else
                    active="NO";
                PreparedStatement ps = cn.prepareStatement("SELECT COUNT(*) from member_teams(?)");
                ps.setObject(1, id);
                ResultSet cs = ps.executeQuery();
                cs.next();
                int count = cs.getInt("count");
                model.addRow(new Object[]{id, sport, name, active,count});
            }

            rs = statement.executeQuery("SELECT sportname FROM select_sports(2, NULL, NULL, NULL)");
            sportCombobox.removeAllItems();
            sportCombobox.addItem("Any");
            while(rs.next()){
                sportCombobox.addItem(rs.getString("sportname"));
            }
            if(teamsTable.getRowCount()>0)
                teamsTable.setRowSelectionInterval(0, 0);
            else
                showMessageDialog(null, "No entries for table, please add some!");
            nameTextfield.setText("");
            sportCombobox.setSelectedIndex(0);
            activeCheckBox.setSelected(false);
            idRadioButton.setSelected(true);
        }catch(Exception e){
         showMessageDialog(null, e.getMessage());
        }
    }

    private void openPopup(){
       newTeamButton.setEnabled(false);
       editTeamButton.setEnabled(false);
       teamsTable.setEnabled(false);
       searchButton.setEnabled(false);
       resetButton.setEnabled(false);
    }
    
    private void closePopup(){
        newTeamButton.setEnabled(true);
        editTeamButton.setEnabled(true);
        teamsTable.setEnabled(true);
        searchButton.setEnabled(true);
        resetButton.setEnabled(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activateButton;
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JLabel activeLabel;
    private javax.swing.JButton addMemberButton;
    private javax.swing.JFormattedTextField addMemberTextfield;
    private javax.swing.JFrame editFrame;
    private javax.swing.JTextField editName;
    private javax.swing.JComboBox<String> editSport;
    private javax.swing.JButton editTeamButton;
    private javax.swing.JRadioButton idRadioButton;
    private javax.swing.JFrame insertFrame;
    private javax.swing.JTextField insertName;
    private javax.swing.JComboBox<String> insertSport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton membersButton;
    private javax.swing.JFrame membersFrame;
    private javax.swing.JRadioButton nameRadioButton;
    private javax.swing.JTextField nameTextfield;
    private javax.swing.JButton newTeamButton;
    private javax.swing.JButton removeMemberButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchButton;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JComboBox<String> sportCombobox;
    private javax.swing.JRadioButton sportRadioButton;
    private javax.swing.JButton submitEdit;
    private javax.swing.JButton submitInsert;
    private javax.swing.JLabel teamIdLabel;
    private javax.swing.JTable teamMembersTable;
    private javax.swing.JLabel teamNameLabel;
    private javax.swing.JTable teamsTable;
    // End of variables declaration//GEN-END:variables
}
